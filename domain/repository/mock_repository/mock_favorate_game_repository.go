// Code generated by MockGen. DO NOT EDIT.
// Source: favorate_game_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	output "github.com/taniwhy/mochi-match-rest/domain/models/output"
	reflect "reflect"
)

// MockIFavoriteGameRepository is a mock of IFavoriteGameRepository interface
type MockIFavoriteGameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFavoriteGameRepositoryMockRecorder
}

// MockIFavoriteGameRepositoryMockRecorder is the mock recorder for MockIFavoriteGameRepository
type MockIFavoriteGameRepositoryMockRecorder struct {
	mock *MockIFavoriteGameRepository
}

// NewMockIFavoriteGameRepository creates a new mock instance
func NewMockIFavoriteGameRepository(ctrl *gomock.Controller) *MockIFavoriteGameRepository {
	mock := &MockIFavoriteGameRepository{ctrl: ctrl}
	mock.recorder = &MockIFavoriteGameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFavoriteGameRepository) EXPECT() *MockIFavoriteGameRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockIFavoriteGameRepository) FindByID(id string) ([]*output.FavoriteGamesRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].([]*output.FavoriteGamesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockIFavoriteGameRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIFavoriteGameRepository)(nil).FindByID), id)
}

// Insert mocks base method
func (m *MockIFavoriteGameRepository) Insert(room *models.FavoriteGame) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIFavoriteGameRepositoryMockRecorder) Insert(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIFavoriteGameRepository)(nil).Insert), room)
}

// Delete mocks base method
func (m *MockIFavoriteGameRepository) Delete(uID, fID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uID, fID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIFavoriteGameRepositoryMockRecorder) Delete(uID, fID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIFavoriteGameRepository)(nil).Delete), uID, fID)
}
