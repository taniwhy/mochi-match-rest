// Code generated by MockGen. DO NOT EDIT.
// Source: room_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	output "github.com/taniwhy/mochi-match-rest/domain/models/output"
	reflect "reflect"
)

// MockIRoomUseCase is a mock of IRoomUseCase interface
type MockIRoomUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIRoomUseCaseMockRecorder
}

// MockIRoomUseCaseMockRecorder is the mock recorder for MockIRoomUseCase
type MockIRoomUseCaseMockRecorder struct {
	mock *MockIRoomUseCase
}

// NewMockIRoomUseCase creates a new mock instance
func NewMockIRoomUseCase(ctrl *gomock.Controller) *MockIRoomUseCase {
	mock := &MockIRoomUseCase{ctrl: ctrl}
	mock.recorder = &MockIRoomUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRoomUseCase) EXPECT() *MockIRoomUseCaseMockRecorder {
	return m.recorder
}

// GetList mocks base method
func (m *MockIRoomUseCase) GetList(c *gin.Context) ([]*output.RoomResBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", c)
	ret0, _ := ret[0].([]*output.RoomResBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockIRoomUseCaseMockRecorder) GetList(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockIRoomUseCase)(nil).GetList), c)
}

// GetByID mocks base method
func (m *MockIRoomUseCase) GetByID(c *gin.Context) (*output.RoomDetailResBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c)
	ret0, _ := ret[0].(*output.RoomDetailResBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockIRoomUseCaseMockRecorder) GetByID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRoomUseCase)(nil).GetByID), c)
}

// Create mocks base method
func (m *MockIRoomUseCase) Create(c *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockIRoomUseCaseMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRoomUseCase)(nil).Create), c)
}

// Update mocks base method
func (m *MockIRoomUseCase) Update(c *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIRoomUseCaseMockRecorder) Update(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRoomUseCase)(nil).Update), c)
}

// Delete mocks base method
func (m *MockIRoomUseCase) Delete(c *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIRoomUseCaseMockRecorder) Delete(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRoomUseCase)(nil).Delete), c)
}

// Join mocks base method
func (m *MockIRoomUseCase) Join(c *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockIRoomUseCaseMockRecorder) Join(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockIRoomUseCase)(nil).Join), c)
}

// Leave mocks base method
func (m *MockIRoomUseCase) Leave(c *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave
func (mr *MockIRoomUseCaseMockRecorder) Leave(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockIRoomUseCase)(nil).Leave), c)
}

// CheckEntry mocks base method
func (m *MockIRoomUseCase) CheckEntry(c *gin.Context) (bool, *output.RoomDetailResBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEntry", c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*output.RoomDetailResBody)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckEntry indicates an expected call of CheckEntry
func (mr *MockIRoomUseCaseMockRecorder) CheckEntry(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEntry", reflect.TypeOf((*MockIRoomUseCase)(nil).CheckEntry), c)
}
